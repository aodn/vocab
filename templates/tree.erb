
<% for @conceptScheme in query_sql_subject( %{
	select subject from _rdf_m where predicate = 'rdf:type' and object = 'skos:ConceptScheme'; }, nil )%>

<%= @conceptScheme %>

  <% for @topConcept in query_sql_subject( %{
    select 
      r1.subject 
    from _rdf_m r1 
    join _rdf_m r2 on r2.subject = r1.subject 
    where r1.predicate = 'rdf:type' 
    and r1.object = 'skos:TopConcept'
    and r2.predicate = 'skos:inScheme' 
    and r2.object = '#{ @conceptScheme }' ; } , nil )%>
  <%= @topConcept %>

    <% for @narrower in query_sql_subject( %{
      select 
        r1.subject 
      from _rdf_m r1 
      join _rdf_m r2 on r2.subject = r1.subject 
      where r1.predicate = 'rdf:type' 
      and r1.object = 'skos:Concept'
      and r2.predicate = 'skos:broader' 
      and r2.object = '#{ @topConcept}' ; } , nil )%>
    <%= @narrower%>


      <% for @narrower2 in query_sql_subject( %{
        select 
          r1.subject 
        from _rdf_m r1 
        join _rdf_m r2 on r2.subject = r1.subject 
        where r1.predicate = 'rdf:type' 
        and r1.object = 'skos:Concept'
        and r2.predicate = 'skos:broader' 
        and r2.object = '#{ @narrower}' ; } , nil )%>
      <%= @narrower2%>
      <% end %>
    <% end %>
  <% end %>



  -- this isn't correct 
  -- we need to constrain this with a test that there's no broader indicating that it's a parent 


    <% for @concept in query_sql_subject( %{

      select
        r1.subject -- , r2.predicate, r2.object, r3.object
      from _rdf_m r1
      left join _rdf_m r2 on r2.subject = r1.subject and r2.predicate = 'skos:broader' 
      left join _rdf_m r3 on r3.subject = r1.subject and r3.predicate = 'skos:inScheme'
      where
        r1.predicate = 'rdf:type' and r1.object = 'skos:Concept'
        and r2.object is null
        and r3.object = '#{ @conceptScheme}'
      order by r1.subject


    } , nil )%>
    <%= @concept%>
  <% end %>


  

<% end %>


