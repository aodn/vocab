
<% for @conceptScheme in query_sql_subject( %{
	select subject from _rdf_m where predicate = 'rdf:type' and object = 'skos:ConceptScheme'; }, nil )%>

<%= @conceptScheme %>

  <% for @topConcept in query_sql_subject( %{
    select
      type.subject
    from _rdf_m type
    join _rdf_m inScheme on inScheme.subject = type.subject
    where type.predicate = 'rdf:type' and type.object = 'skos:TopConcept'
    and inScheme.predicate = 'skos:inScheme' and inScheme.object = '#{ @conceptScheme }' ; 
  } , nil )%>
  <%= @topConcept %>

    <% for @narrower in query_sql_subject( %{
      select
        type.subject
      from _rdf_m type
      join _rdf_m broader on broader.subject = type.subject
      where type.predicate = 'rdf:type' and type.object = 'skos:Concept'
      and broader.predicate = 'skos:broader' and broader.object = '#{ @topConcept}' ; 
    } , nil )%>
    <%= @narrower%>


      <% for @narrower2 in query_sql_subject( %{
        select
          type.subject
        from _rdf_m type
        join _rdf_m narrower on narrower.subject = type.subject
        where type.predicate = 'rdf:type' and type.object = 'skos:Concept'
        and narrower.predicate = 'skos:broader' and narrower.object = '#{ @narrower}' ; 
      } , nil )%>
      <%= @narrowenarrower%>
      <% end %>
    <% end %>
  <% end %>



  -- this isn't correct
  -- we need to constrain this with a test that there's no broader indicating that it's a parent


    <% for @concept in query_sql_subject( %{
      select
        type.subject
      from _rdf_m type
      left join _rdf_m broader on broader.subject = type.subject and broader.predicate = 'skos:broader'
      left join _rdf_m inScheme on inScheme.subject = type.subject and inScheme.predicate = 'skos:inScheme'
      where
        type.predicate = 'rdf:type' and type.object = 'skos:Concept'
        and broader.object is null
        and inScheme.object = '#{ @conceptScheme}'
      order by type.subject
    } , nil )%>
    <%= @concept%>
  <% end %>




<% end %>


